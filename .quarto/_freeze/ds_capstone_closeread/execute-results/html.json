{
  "hash": "d0018cfb502ba66059bb1ffd024ac553",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Science Capstone\"\nauthor: \"Havisha Khurana\"\nformat: \n  closeread-html:\n    layout: \"overlay-left\"\n---\n\n\n\n\n\n\n**Project Overview**\n\nIn Oregon, state and local revenues are pooled together and redistributed to school districts based on a funding formula. Approximately 60% of the total education budget comes from the state’s share, making it a critical revenue source for most districts. In this project, I analyzed revenue and expenditure data by school district over multiple years.\n\nTo do: In the background, add OR district map\n\n**Coding Steps**\n\n\n\n:::{.cr-section}\n\nFor this capstone project, I took up the following challenges: @cr-scrapepdf\n\n:::{focus-on=\"cr-scrapepdf\"}\n\n1. Scrape PDFs with district revenue allocation receipts.\n\n\n2. Compiled 4 different sources of data.\n\n\n3. Used `quarto closeread` for this scrollytelling article.\n:::\n\n\n:::{#cr-scrapepdf}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](closeread_figures/pdf_scrape_eg.png){width=627}\n:::\n:::\n\n\n\n:::\n\n:::\n\n\n\n**The Nuts and Bolts of Data-Scraping Process**\n\nIn the first section, I take you through the process I followed for the data-scraping.\n\n\n\n:::{.cr-section}\n\nThis function is used to read the pdf and break it into pieces that follow the same structure. [@cr-districtlist1]{scale-by=\"1.25\"}\n\nAs parameters, we need to pass the file path where the pdf is saved. [@cr-districtlist1]{highlight=\"1\"}\n\nFirst, we read the pdf as a vector of all text on each page. Then, we split the vector by new-line-character so that each line becomes a row in the dataset. We also do some preliminary cleaning by removing white spaces from the text. [@cr-districtlist1]{highlight=\"3-14\"}\n\nThe next part flags where the location where each district entry starts and ends. [@cr-districtlist2]{highlight=\"4-13\"}\n\nThen, I split each district related lines into a list. [@cr-districtlist2]{highlight=\"16-18\"}\n\n:::{#cr-districtlist1}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscrape_pdf_data <- function(file_path) {\n\n  file_text_lines <- pdf_text(file_path) %>%\n    map2_dfr(., 1:length(.), ~ {\n      text <- strsplit(.x, \"\\n\")[[1]]\n      text <- text[!grepl(\"^\\\\s*$\", text)]\n      text <- gsub(\"^\\\\s\\\\s+\", \"\", text)\n      text <- gsub(\"\\\\s+\", \" \", text)\n      text <- gsub(\"‐\", \"-\", text)\n\n      page_df <- data.frame(text = text, page = .y)\n\n      return(page_df)\n    })\n\n  [...]\n```\n:::\n\n\n:::\n\n:::{#cr-districtlist2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscrape_pdf_data <- function(file_path) {\n  [...]\n  \n  get_district_page <- file_text_lines %>%\n    mutate(district_id_found = as.integer(grepl(\"District ID:\", text)))\n    select(page, district_id_found) %>%\n    distinct() %>%\n    filter(district_id_found == 1) %>%\n    mutate(district_index = row_number()) %>%\n    select(-district_id_found) %>%\n    full_join(tibble(page = 1:max(file_text_lines$page)), by = \"page\") %>%\n    arrange(page) %>%\n    fill(district_index, .direction = \"down\")\n\n  district_year_list <- file_text_lines %>%\n    left_join(get_district_page) %>%\n    split(., .$district_index)\n\n  return(district_year_list)\n}\n```\n:::\n\n\n:::\n\n\nThe next function shows the steps to extract information from lines related to a district. @cr-districtinfo1\n\nThe function parameters is a dataframe of all rows associated with a district. [@cr-districtinfo1]{highlight=\"1\"}\n\nI classify each line based on how I want to treat it using string patterns. [@cr-districtinfo1]{highlight=\"4-10\"}\n\nThen, I use a regular expression to get district information, including county location, district name and district id. [@cr-districtinfo1]{highlight=\"21\"}\n\nUsing a second regular expression, I extract information from each category-row. [@cr-districtinfo2]{highlight=\"9-12\"}\n\nThen I put it in a dataframe format, and do some additional cleaning. [@cr-districtinfo2]{highlight=\"19\"}\n\n::: {#cr-districtinfo1}\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_district_info <- function(district_df) {\n  district_df <- district_df %>%\n    mutate(\n      information_type = case_when(\n        grepl(\"District ID\", text) ~ \"district_info\",\n        # adding as files from 2014 onwards have this in the entry name\n        grepl(\"for funding calculation|information only\", text) ~ \"entry_name\",\n        grepl(\":\", text) ~ \"category_info\",\n        grepl(\"ADMw\", text) ~ \"total\",\n        TRUE ~ \"entry_name\"\n      )\n    )  %>%\n    mutate(entry_index = cumsum(information_type == \"entry_name\"))\n  \n  # grab district level info\n  district_details <- district_df %>%\n    filter(information_type == \"district_info\") %>%\n    select(text) %>%\n    unlist() %>%\n    str_match(., \"^(.*?),\\\\s*(.*?)\\\\s*District ID:\\\\s*(\\\\d+)$\")\n   \n  [...]\n```\n:::\n\n\n:::\n\n::: {#cr-districtinfo2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# grab each entry-level information\none_district_info <- function(district_df) {\n  [...]\n  entry_category_information <- district_df %>%\n    filter(entry_index != 0) %>%\n    split(., .$entry_index) %>%\n    map_dfr(., ~ {\n      # pattern different for 2024, no = sign\n      category_pattern <-  \"(.*):\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*X\\\\s*(-?[\\\\d.]+)\n      \\\\s*=?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*X\\\\s*(-?[\\\\d.]+)\n      \\\\s*=?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\"\n      \n      \n      .x %>%\n        filter(information_type == \"category_info\") %>%\n        select(text) %>%\n        unlist() %>%\n        str_match(., category_pattern) %>%\n        as.data.frame() %>%\n        select(-V7) %>%\n        rename(\n          \"org_text\" = \"V1\",\n          \"category\" = \"V2\",\n          \"current_year_adm\" = \"V3\",\n          \"category_weight\" = \"V4\",\n          \"current_year_admw\" = \"V5\",\n          \"past_year_adm\" = \"V6\",\n          \"past_year_admw\" = \"V8\"\n        ) %>%\n        mutate(entry_name = unique(.x[.x$information_type == \"entry_name\", ]$text),\n               entry_index = unique(.x$entry_index))\n    }) %>%\n    mutate(\n      across(current_year_adm:past_year_admw, ~ gsub(\",\", \"\", .x)),\n      across(current_year_adm:past_year_admw, ~ ifelse(is.na(.x), 0, .x)),\n      across(current_year_adm:past_year_admw, as.numeric)\n    )\n  \n  return(entry_category_information)\n}\n```\n:::\n\n\n:::\n\n\n:::\n\n\n",
    "supporting": [
      "ds_capstone_closeread_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}