{"title":"Run-Through Example","markdown":{"yaml":{"title":"Run-Through Example","author":"Havisha Khurana","date":"today","date-format":"full","editor_options":{"chunk_output_type":"console"},"format":{"closeread-html":{"cr-style":{"narrative-background-color-overlay":"darkslategrey","narrative-text-color-overlay":"#e2e2e2","narrative-font-family":"serif","section-background-color":"#fffbf1"},"embed-resources":true,"theme":"journal","highlight":"tango","df-print":"paged","self-contained-math":true,"code-overflow":"wrap","code-line-numbers":true,"code-copy":true,"highlight-style":"pygments"}},"execute":{"warning":false,"error":false,"message":false,"echo":false}},"headingText":"read most updated file from year folders when there are year folders","containsRefs":false,"markdown":"\n\n<br>\n\nOne of the data sources I worked on for the project were public documentation from the Oregon Department of Education (ODE) that detailed state funds allocation to school districts by student types. This document came in the form of structured .pdfs. The primary 'Data Sciency' task I undertook during the capstone was to scrape 14 pdfs of 233 pages each.\n\n<br> \nIn this section, I will walkthrough an example of scraping data for one district. All these functions are found in the **code/** folder. <br>\n\nLet's start by looking at one pdf page.\n\n![](closeread_figures/pdf_scrape_eg.png){fig-align=\"center\" width=\"800\"}\n\n<br>\n\nLet's see the intermediate steps for transforming the data.\n\n<br><br>\n\n:::::::: cr-section\n::: {#cr-examplestep1}\n```{r echo=FALSE, eval=TRUE}\nlibrary(tidyverse)\nlibrary(pdftools)\n\nfile_to_read <- function(directory_path) {\n  # get list of directories inside\n  dir_list <- list.dirs(directory_path)\n  \n  # remove the path we provided as it's added by default\n  dir_list <- setdiff(dir_list, directory_path)\n  \n  # list files in each directory and extract the dates\n  file_list <- map_dfr(dir_list,\n                       ~ tibble(\n                         files = list.files(.x),\n                         dir = .x,\n                         dates = mdy(gsub(\".*?(\\\\d+-\\\\d+-\\\\d+).*\", \"\\\\1\", files)),\n                         is_max = ifelse(dates == max(dates), 1, 0)\n                       )) %>%\n    filter(is_max == 1) %>%\n    mutate(file_path = paste0(dir, \"/\", files))\n  \n  return(file_list)\n}\n\nfiles <- file_to_read(\"data_raw/District Estimates ADMw Breakouts\")\n\nfile_path <- files$file_path[1]\n  \n get_year <- str_extract(file_path, \"\\\\d{2}-\\\\d{2}\")\n format_year <- str_replace(get_year, \"(\\\\d{2})-(\\\\d{2})\", \"20\\\\1\")\n  \n  # each line of pdf is a row\n  file_text_lines <- pdf_text(file_path) %>% # character for each page\n    # converts to rows per df\n    map2_dfr(., 1:length(.), ~ {\n      text <- strsplit(.x, \"\\n\")[[1]]\n      # remove empty lines\n      text <- text[!grepl(\"^\\\\s*$\", text)]\n      # remove trailing spaces\n      text <- gsub(\"^\\\\s\\\\s+\", \"\", text)\n      # remove multiple spaces in between\n      text <- gsub(\"\\\\s+\", \" \", text)\n      \n      # there are a few negatives with a symbol other than minus\n      text <- gsub(\"‐\", \"-\", text)\n      # convert to df\n      page_df <- tibble(text = text, page = .y)\n      \n      return(page_df)\n    }) %>%\n    mutate(district_id_found = as.integer(grepl(\"District ID:\", text)))\n  \nfile_text_lines\n  # now, split the data into individual district\n```\n:::\n\nFrom the pdf, I get to a dataframe of each line. @cr-examplestep1\n\n::: {#cr-examplestep2}\n```{r echo=FALSE, eval=TRUE}\n# see which pages cover each district\n  get_district_page <- file_text_lines %>%\n    select(page, district_id_found) %>%\n    distinct() %>%\n    filter(district_id_found == 1) %>%\n    mutate(district_index = row_number()) %>%\n    select(-district_id_found) %>%\n    full_join(tibble(page = 1:max(file_text_lines$page)), by = \"page\") %>%\n    arrange(page) %>%\n    fill(district_index, .direction = \"down\") \n  \n  # split\n  \n  district_year_list <- file_text_lines %>%\n    left_join(get_district_page) %>%\n    split(., .$district_index)\n\ndistrict_year_list[[1]]\n```\n:::\n\nThen, I create a list of `r length(district_year_list)` dataframes corresponding to informaion associated with each Oregon school district. @cr-examplestep2\n\n::: {#cr-examplestep3}\n```{r echo=FALSE, eval=TRUE}\n# remove rows with reduntant information from all dfs\n  ## Template\n  ## Ignore: Starting with State, As, Page, school_year if length < 20\ndistrict_text <- district_year_list[[1]] %>%\n      mutate(\n        text_length = nchar(text),\n        remove_text = ifelse(grepl(paste0(\"^\", format_year), text) &\n                               text_length < 25, 1, 0)\n      ) %>%\n      filter(\n        !grepl(\"^STATE|As of|^Page\", text),\n        remove_text == 0\n      ) %>%\n      select(text, page)%>%\n    mutate(\n      information_type = case_when(\n        grepl(\"District ID\", text) ~ \"district_info\",\n        # adding as files from 2014 onwards have this in the entry name\n        grepl(\"for funding calculation|information only\", text) ~ \"entry_name\",\n        grepl(\":\", text) ~ \"category_info\",\n        grepl(\"ADMw\", text) ~ \"total\",\n        TRUE ~ \"entry_name\"\n      )\n    )  %>%\n    mutate(entry_index = cumsum(information_type == \"entry_name\"))\n\ndistrict_text\n```\n:::\n\nI classify each line leveraging the structure. @cr-examplestep3\n\n::: {#cr-examplestep4}\n```{r echo=FALSE, eval=TRUE}\n# grab district level info\n  district_details <- district_text %>%\n    filter(information_type == \"district_info\") %>%\n    select(text) %>%\n    unlist() %>%\n    str_match(., \"^(.*?),\\\\s*(.*?)\\\\s*District ID:\\\\s*(\\\\d+)$\")\n  \ndistrict_details\n```\n:::\n\nUsing the line classified as **district_info**, I grabbed the district details. @cr-examplestep4\n\n::: {#cr-examplestep5}\n```{r echo=FALSE, eval=TRUE}\n# grab each entry-level information\n  entry_category_information <- district_text %>%\n    filter(entry_index != 0) %>%\n    split(., .$entry_index) %>%\n    map_dfr(., ~ {\n      # pattern different for 2024, no = sign\n      category_pattern <-  \"(.*):\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*X\\\\s*(-?[\\\\d.]+)\\\\s*=?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*X\\\\s*(-?[\\\\d.]+)\\\\s*=?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\"\n      \n      \n      .x %>%\n        filter(information_type == \"category_info\") %>%\n        select(text) %>%\n        unlist() %>%\n        str_match(., category_pattern) %>%\n        as.data.frame() %>%\n        select(-V7) %>%\n        rename(\n          \"org_text\" = \"V1\",\n          \"category\" = \"V2\",\n          \"current_year_adm\" = \"V3\",\n          \"category_weight\" = \"V4\",\n          \"current_year_admw\" = \"V5\",\n          \"past_year_adm\" = \"V6\",\n          \"past_year_admw\" = \"V8\"\n        ) %>%\n        mutate(entry_name = unique(.x[.x$information_type == \"entry_name\", ]$text),\n               entry_index = unique(.x$entry_index))\n    }) %>%\n    mutate(\n      across(current_year_adm:past_year_admw, ~ gsub(\",\", \"\", .x)),\n      across(current_year_adm:past_year_admw, ~ ifelse(is.na(.x), 0, .x)),\n      across(current_year_adm:past_year_admw, as.numeric)\n    )\n  \n  \n  \n  # compile a district_level_df\n  \n  district_level_df <- entry_category_information %>%\n    mutate(\n      district_geo = district_details[2],\n      district_name = district_details[3],\n      district_id = district_details[4],\n      #school_year = unique(district_df$school_year),\n      current_year_adm_district = sum(current_year_adm[category == \"ADMr\"], na.rm = T),\n      current_year_admw_district = sum(current_year_admw, na.rm = T),\n      past_year_adm_district = sum(past_year_adm[category == \"ADMr\"], na.rm = T),\n      past_year_admw_district = sum(past_year_admw, na.rm = T)\n    ) %>%\n    group_by(entry_name) %>%\n    mutate(\n      current_year_adm_entry = sum(current_year_adm[category == \"ADMr\"], na.rm = T),\n      current_year_admw_entry = sum(current_year_admw),\n      past_year_adm_entry = sum(past_year_adm[category == \"ADMr\"], na.rm = T),\n      past_year_admw_entry = sum(past_year_admw),\n      current_year_effective_admw_entry = max(current_year_admw_entry, past_year_admw_entry),\n      current_weight_entry = ifelse(\n        current_year_effective_admw_entry == current_year_adm_entry,\n        1,\n        0\n      )\n    ) %>%\n    ungroup() %>%\n    mutate(\n      current_year_eff_admw_district = sum(unique(current_year_effective_admw_entry)),\n      current_year_extra_weight_district = current_year_eff_admw_district - current_year_adm_district,\n      current_weight_district = ifelse(current_year_extra_weight_district < 1, 1, 0)\n    )\n  \ndistrict_level_df\n```\n:::\n\nThe resulting dataframe for one school district after applying the regular expressions rules. @cr-examplestep5\n::::::::\n\n<br><br>\n\n*And then repeating it over across all districts, and all years.*\n\n<br>\n","srcMarkdownNoYaml":"\n\n<br>\n\nOne of the data sources I worked on for the project were public documentation from the Oregon Department of Education (ODE) that detailed state funds allocation to school districts by student types. This document came in the form of structured .pdfs. The primary 'Data Sciency' task I undertook during the capstone was to scrape 14 pdfs of 233 pages each.\n\n<br> \nIn this section, I will walkthrough an example of scraping data for one district. All these functions are found in the **code/** folder. <br>\n\nLet's start by looking at one pdf page.\n\n![](closeread_figures/pdf_scrape_eg.png){fig-align=\"center\" width=\"800\"}\n\n<br>\n\nLet's see the intermediate steps for transforming the data.\n\n<br><br>\n\n:::::::: cr-section\n::: {#cr-examplestep1}\n```{r echo=FALSE, eval=TRUE}\nlibrary(tidyverse)\nlibrary(pdftools)\n\n# read most updated file from year folders when there are year folders\nfile_to_read <- function(directory_path) {\n  # get list of directories inside\n  dir_list <- list.dirs(directory_path)\n  \n  # remove the path we provided as it's added by default\n  dir_list <- setdiff(dir_list, directory_path)\n  \n  # list files in each directory and extract the dates\n  file_list <- map_dfr(dir_list,\n                       ~ tibble(\n                         files = list.files(.x),\n                         dir = .x,\n                         dates = mdy(gsub(\".*?(\\\\d+-\\\\d+-\\\\d+).*\", \"\\\\1\", files)),\n                         is_max = ifelse(dates == max(dates), 1, 0)\n                       )) %>%\n    filter(is_max == 1) %>%\n    mutate(file_path = paste0(dir, \"/\", files))\n  \n  return(file_list)\n}\n\nfiles <- file_to_read(\"data_raw/District Estimates ADMw Breakouts\")\n\nfile_path <- files$file_path[1]\n  \n get_year <- str_extract(file_path, \"\\\\d{2}-\\\\d{2}\")\n format_year <- str_replace(get_year, \"(\\\\d{2})-(\\\\d{2})\", \"20\\\\1\")\n  \n  # each line of pdf is a row\n  file_text_lines <- pdf_text(file_path) %>% # character for each page\n    # converts to rows per df\n    map2_dfr(., 1:length(.), ~ {\n      text <- strsplit(.x, \"\\n\")[[1]]\n      # remove empty lines\n      text <- text[!grepl(\"^\\\\s*$\", text)]\n      # remove trailing spaces\n      text <- gsub(\"^\\\\s\\\\s+\", \"\", text)\n      # remove multiple spaces in between\n      text <- gsub(\"\\\\s+\", \" \", text)\n      \n      # there are a few negatives with a symbol other than minus\n      text <- gsub(\"‐\", \"-\", text)\n      # convert to df\n      page_df <- tibble(text = text, page = .y)\n      \n      return(page_df)\n    }) %>%\n    mutate(district_id_found = as.integer(grepl(\"District ID:\", text)))\n  \nfile_text_lines\n  # now, split the data into individual district\n```\n:::\n\nFrom the pdf, I get to a dataframe of each line. @cr-examplestep1\n\n::: {#cr-examplestep2}\n```{r echo=FALSE, eval=TRUE}\n# see which pages cover each district\n  get_district_page <- file_text_lines %>%\n    select(page, district_id_found) %>%\n    distinct() %>%\n    filter(district_id_found == 1) %>%\n    mutate(district_index = row_number()) %>%\n    select(-district_id_found) %>%\n    full_join(tibble(page = 1:max(file_text_lines$page)), by = \"page\") %>%\n    arrange(page) %>%\n    fill(district_index, .direction = \"down\") \n  \n  # split\n  \n  district_year_list <- file_text_lines %>%\n    left_join(get_district_page) %>%\n    split(., .$district_index)\n\ndistrict_year_list[[1]]\n```\n:::\n\nThen, I create a list of `r length(district_year_list)` dataframes corresponding to informaion associated with each Oregon school district. @cr-examplestep2\n\n::: {#cr-examplestep3}\n```{r echo=FALSE, eval=TRUE}\n# remove rows with reduntant information from all dfs\n  ## Template\n  ## Ignore: Starting with State, As, Page, school_year if length < 20\ndistrict_text <- district_year_list[[1]] %>%\n      mutate(\n        text_length = nchar(text),\n        remove_text = ifelse(grepl(paste0(\"^\", format_year), text) &\n                               text_length < 25, 1, 0)\n      ) %>%\n      filter(\n        !grepl(\"^STATE|As of|^Page\", text),\n        remove_text == 0\n      ) %>%\n      select(text, page)%>%\n    mutate(\n      information_type = case_when(\n        grepl(\"District ID\", text) ~ \"district_info\",\n        # adding as files from 2014 onwards have this in the entry name\n        grepl(\"for funding calculation|information only\", text) ~ \"entry_name\",\n        grepl(\":\", text) ~ \"category_info\",\n        grepl(\"ADMw\", text) ~ \"total\",\n        TRUE ~ \"entry_name\"\n      )\n    )  %>%\n    mutate(entry_index = cumsum(information_type == \"entry_name\"))\n\ndistrict_text\n```\n:::\n\nI classify each line leveraging the structure. @cr-examplestep3\n\n::: {#cr-examplestep4}\n```{r echo=FALSE, eval=TRUE}\n# grab district level info\n  district_details <- district_text %>%\n    filter(information_type == \"district_info\") %>%\n    select(text) %>%\n    unlist() %>%\n    str_match(., \"^(.*?),\\\\s*(.*?)\\\\s*District ID:\\\\s*(\\\\d+)$\")\n  \ndistrict_details\n```\n:::\n\nUsing the line classified as **district_info**, I grabbed the district details. @cr-examplestep4\n\n::: {#cr-examplestep5}\n```{r echo=FALSE, eval=TRUE}\n# grab each entry-level information\n  entry_category_information <- district_text %>%\n    filter(entry_index != 0) %>%\n    split(., .$entry_index) %>%\n    map_dfr(., ~ {\n      # pattern different for 2024, no = sign\n      category_pattern <-  \"(.*):\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*X\\\\s*(-?[\\\\d.]+)\\\\s*=?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\\\\s*X\\\\s*(-?[\\\\d.]+)\\\\s*=?\\\\s*(-?[\\\\d,]+\\\\.\\\\d+)?\"\n      \n      \n      .x %>%\n        filter(information_type == \"category_info\") %>%\n        select(text) %>%\n        unlist() %>%\n        str_match(., category_pattern) %>%\n        as.data.frame() %>%\n        select(-V7) %>%\n        rename(\n          \"org_text\" = \"V1\",\n          \"category\" = \"V2\",\n          \"current_year_adm\" = \"V3\",\n          \"category_weight\" = \"V4\",\n          \"current_year_admw\" = \"V5\",\n          \"past_year_adm\" = \"V6\",\n          \"past_year_admw\" = \"V8\"\n        ) %>%\n        mutate(entry_name = unique(.x[.x$information_type == \"entry_name\", ]$text),\n               entry_index = unique(.x$entry_index))\n    }) %>%\n    mutate(\n      across(current_year_adm:past_year_admw, ~ gsub(\",\", \"\", .x)),\n      across(current_year_adm:past_year_admw, ~ ifelse(is.na(.x), 0, .x)),\n      across(current_year_adm:past_year_admw, as.numeric)\n    )\n  \n  \n  \n  # compile a district_level_df\n  \n  district_level_df <- entry_category_information %>%\n    mutate(\n      district_geo = district_details[2],\n      district_name = district_details[3],\n      district_id = district_details[4],\n      #school_year = unique(district_df$school_year),\n      current_year_adm_district = sum(current_year_adm[category == \"ADMr\"], na.rm = T),\n      current_year_admw_district = sum(current_year_admw, na.rm = T),\n      past_year_adm_district = sum(past_year_adm[category == \"ADMr\"], na.rm = T),\n      past_year_admw_district = sum(past_year_admw, na.rm = T)\n    ) %>%\n    group_by(entry_name) %>%\n    mutate(\n      current_year_adm_entry = sum(current_year_adm[category == \"ADMr\"], na.rm = T),\n      current_year_admw_entry = sum(current_year_admw),\n      past_year_adm_entry = sum(past_year_adm[category == \"ADMr\"], na.rm = T),\n      past_year_admw_entry = sum(past_year_admw),\n      current_year_effective_admw_entry = max(current_year_admw_entry, past_year_admw_entry),\n      current_weight_entry = ifelse(\n        current_year_effective_admw_entry == current_year_adm_entry,\n        1,\n        0\n      )\n    ) %>%\n    ungroup() %>%\n    mutate(\n      current_year_eff_admw_district = sum(unique(current_year_effective_admw_entry)),\n      current_year_extra_weight_district = current_year_eff_admw_district - current_year_adm_district,\n      current_weight_district = ifelse(current_year_extra_weight_district < 1, 1, 0)\n    )\n  \ndistrict_level_df\n```\n:::\n\nThe resulting dataframe for one school district after applying the regular expressions rules. @cr-examplestep5\n::::::::\n\n<br><br>\n\n*And then repeating it over across all districts, and all years.*\n\n<br>\n"},"formats":{"closeread-html":{"identifier":{"display-name":"HTML","target-format":"closeread-html","base-format":"html","extension-name":"closeread"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":true,"format-resources":[],"notebook-links":true,"shortcodes":["C:\\Users\\havis\\University of Oregon Dropbox\\Havi Khurana\\Courses\\2024_02_Winter\\EDLD DS Capstone\\sped-oregon-finance\\_extensions\\qmd-lab\\closeread\\spacer.lua"]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["C:\\Users\\havis\\University of Oregon Dropbox\\Havi Khurana\\Courses\\2024_02_Winter\\EDLD DS Capstone\\sped-oregon-finance\\_extensions\\qmd-lab\\closeread\\closeread.lua"],"css":["_extensions/qmd-lab/closeread/closeread.css"],"embed-resources":true,"highlight-style":"pygments","output-file":"code_explanation2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","page-layout":"full","revealjs-plugins":[],"title":"Run-Through Example","author":"Havisha Khurana","date":"today","date-format":"full","editor_options":{"chunk_output_type":"console"},"cr-style":{"narrative-background-color-overlay":"darkslategrey","narrative-text-color-overlay":"#e2e2e2","narrative-font-family":"serif","section-background-color":"#fffbf1"},"theme":"journal","highlight":"tango","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}